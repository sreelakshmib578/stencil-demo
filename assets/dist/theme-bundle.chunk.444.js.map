{"version":3,"file":"theme-bundle.chunk.444.js","mappings":"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","sources":["webpack://bigcommerce-cornerstone/./assets/js/theme/common/gift-certificate-validator.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/utils/translations-utils.js","webpack://bigcommerce-cornerstone/./assets/js/theme/gift-certificate.js"],"sourcesContent":["export default function (cert) {\n    if (typeof cert !== 'string' || cert.length === 0) {\n        return false;\n    }\n\n    // Add any custom gift certificate validation logic here\n    return true;\n}\n","const TRANSLATIONS = 'translations';\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\n            return dictionary;\n        }\n    }\n};\n\n/**\n * defines Translation Dictionary to use\n * @param context provides access to 3 validation JSONs from en.json:\n * validation_messages, validation_fallback_messages and default_messages\n * @returns {Object}\n */\nexport const createTranslationDictionary = (context) => {\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\n\n    return translationKeys.reduce((acc, key, i) => {\n        acc[key] = localizations[i];\n        return acc;\n    }, {});\n};\n","import PageManager from './page-manager';\nimport nod from './common/nod';\nimport checkIsGiftCertValid from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\nimport { announceInputErrorMessage } from './common/utils/form-utils';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n            tap: announceInputErrorMessage,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\n                let updatedErrorText = message;\n                amountPlaceholders.forEach((placeholder, i) => {\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\n                        updatedErrorText;\n                });\n                return updatedErrorText;\n            };\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n            tap: announceInputErrorMessage,\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(checkIsGiftCertValid(val));\n            },\n            errorMessage: this.validationDictionary.invalid_gift_certificate,\n        });\n\n        return balanceValidator;\n    }\n}\n"],"names":["cert","length","TRANSLATIONS","isTranslationDictionaryNotEmpty","dictionary","Object","keys","createTranslationDictionary","context","activeDictionary","i","arguments","JSON","parse","undefined","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","split","pop","reduce","acc","GiftCertificate","_PageManager","_this","call","validationDictionary","$certBalanceForm","$","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","tap","announceInputErrorMessage","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","val","numberVal","Number","errorMessage","message","_len","amountRange","Array","_key","updatedErrorText","forEach","placeholder","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","purchaseModel","toName","formModel","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","err","content","updateContent","previewError","wrap","prototype","$balanceForm","balanceValidator","checkIsGiftCertValid","this","invalid_gift_certificate","PageManager"],"sourceRoot":""}